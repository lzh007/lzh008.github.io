<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[WeChat 复习大纲]]></title>
    <url>%2Fpost%2Fdd60c843.html</url>
    <content type="text"><![CDATA[期末考试题型： 单项选择题（20分） 填空题（20分） 判断题（20分） 简答题（20分） 程序填空题（20分） 复习知识点概述 1、简述微信公众平台的作用？（1） 坐拥9亿活跃用户的微信，已成为移动设备装机必备软件。微信改变了人们的生活方式，让很多人过着离不开微信的美好日子。（2） 好消息是，对开发者来说，这个移动互联网上的重要入口，一开始就以开放的姿态面世，微信提供了公众平台和开发平台，分别供公众账号运营者和移动应用开发者使用。（3） 再小的个体，也有自己的品牌。无论是企业、组织，还是媒体、个人，微信公众平台都可以以轻应用的形式提供服务。公众平台的编辑模式，使不会编程的用户也能轻松使用；而开发模式和众多的开放接口，则为开发者提供了广阔的想象空间和难得的机遇。 最大作用：微信渠道将品牌推广给上亿的微信用户，减少宣传成本，提高品牌知名度，打造更具影响力的品牌形象 2、微信公众平台分为哪2种模式，有什么区别？微信公众平台后台管理提供了2种模式：编辑模式和开发模式。两种模式互斥，不能同时开启，默认情况下服务器配置为空，处于关闭状态。当我们同意成为开发者，在服务器配置中开启了回调URL和Token，就进入了开发模式，如下图所示。如果停用，又进入编辑模式。编辑模式：微信公众平台在开通编辑模式的情况下，可以实现文字，语音，图片，图文消息的自动回复和关键词自动回复开发模式：通过微信公众平台开发模式，我们可以实现微信编辑模式几乎所有的功能，同时开发更多高级功能。1、可调用网络API，实现天气、股票、快递、笑话、音乐等信息的查询2.对接数据库。 3、服务号与订阅号有什么区别？服务号：适用企业和组织。订阅号：适用媒体和个人。二者区别如下：第一，定位不同。订阅号为用户提供信息和资讯（央视新闻），服务号主要为用户提供服务（广东移动、招商银行、中国南方航空）第二，群发信息量不同。订阅号每天(24小时内)可以发送1条群发消息到最新公众平台，服务号1个月(30天)内仅可以发送4条群发消息。第三，用户收到信息提醒方式不同。群发信息时，订阅号的用户不会收到即时消息提醒，服务号的用户将收到即时的消息提醒。第四，用户存放位置不同。订阅号将被放入订阅号文件夹中，服务号会在订阅用户(粉丝)的通讯录中。 4、服务号经过认证后，能够获得高级接口，请至少列出四种高级接口名称？支付接口、生成带参数二维码接口、语音识别接口、客服接口。 5、微信能群发哪几种类型的消息？每种类型的消息有什么限制和要求?文字、语音、图片、视频、图文消息。1、群发内容中需添加文字+图片+视频，可先在“素材管理”中设置图文消息，然后群发时选择“图文消息”类型即可。2、上传至素材管理中的图片、语音可多次群发，没有有效期。3、群发图文消息的标题上限为64个字节；4、群发内容字数上限为1200个字符、或600个汉字。5、语音限制：最大5M，最长60秒，支持 mp3、 wma、 wav、 amr格式。6、视频限制：最大20M，支持rm, rmvb, wmv, avi, mpg, mpeg, mp4格式。 6、请简述什么是二维码？二维码的英文为Quick Response Code，简写为QR code。通俗的讲，二维码是二维的条形码，可以在水平和竖直方向同时存储信息。生成的二维码一般为正方形，根据特定的编码方式，在平面（二维方向）上绘制黑白相间的图形。 7、请简述公众号运营策略？1不要骚扰用户2不要乱碰朋友圈3不要使用外挂4重视线下推广（O2O） 8、微信认证后的作用有哪些？微信认证是微信公众平台为了确保公众帐号的信息的真实性、安全性，目前提供给微信公众服务号进行微信认证的服务。1、微信认证后，获得更丰富的高级接口，向用户提供更有价值的个性化服务。2、微信认证后，用户将在微信中看到微信认证特有的标识。 9、为什么要进行微信认证年审？ 微信公众平台开放的接口权限、微信支付商户功能等高级功能都依赖于微信认证资质认证结果，为了保证拥有相应权限功能的公众号是合法可信的企业/组织；一年后企业资质证件、相关运营人信息可能出现变更。 10、微信小程序是什么？有什么作用和优势？所谓微信应用号，就是微信公众平台提供了一种新的开放能力，开发者可以快速开发一个小程序。小程序是一种不需要下载安装即可使用的应用，用户扫一扫或者搜一下即可打开，也不用担心是否安装太多应用，因为无需安装卸载。作用：一种无需下载、安装、注册、卸载的类APP应用。用户只需要微信扫一扫或者搜索一下即可打开应用；用完之后，退出即可，无需关闭卸载；不会打扰用户，更不会推送消息、产生订阅关系、分享到朋友圈。 优势：第一，无需关闭，这个是微信的内存管理的事情，就跟IOS系统一样，退出就好，后台自己会管理好内存；第二，无需卸载，因为你不曾安装，所以你也无需卸载。当然，你可以删除，小程序列表界面选中一个小程序手指向左滑就是删除该小程序，数据也就会同时删除。 11、编程实现PHP调用微信基础支持接口获取access_token.尤其是要理解和掌握CURL的应用。PPT5和实验5 12、编程实现PHP程序调用菜单接口创建菜单，然后根据已创建菜单实现菜单响应回复事件。 13、编程使用微信基础接口实现接收用户消息。 14、编程通过CURL实现创建二维码ticket。 PPT6和实验6 二维码：• 1、临时二维码，是有过期时间的，最长可以设置为在二维码生成后的30天（即2592000秒）后过期，但能够生成较多数量。临时二维码主要用于帐号绑定等不要求二维码永久保存的业务场景• 2、永久二维码，是无过期时间的，但数量较少（目前为最多10万个）。永久二维码主要用于适用于帐号绑定、用户来源统计等场景。 欢迎其他同学继续补充。]]></content>
      <categories>
        <category>考试</category>
      </categories>
      <tags>
        <tag>WeChat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[软件项目的部分问题01]]></title>
    <url>%2Fpost%2F7617a729.html</url>
    <content type="text"><![CDATA[什么是软件设计原则 一、单一职责单一职责原则的英文名称为Single Responsibility Principle - SRP。 原文：There should never be more than one reason for a class to change. 译文：永远不应该有多于一个原因来改变某个类。 理解：单一职责原则就是一个接口或类只有一个职责，它就负责一件事情。好比，玩游戏，LOL那种，辅助位就得尽责，当好辅助位的，不是动不动跟ADC（射手）抢人头，抢兵线。五个位置的英雄各司其职，分工协调好，战斗力妥妥的！ 应用：当我们做系统设计时，如果发现有一个类拥有了两种的职责，那就问自己一个问题：可以将这个类分成两个类吗？如果真的有必要，那就分吧。千万不要让一个类干的事情太多！ 优点： 类的复杂性降低，实现什么职责都要清晰明确的定义； 复杂性降低，那当然可读性提高； 可读性提高，那当然更容易维护了； 变更引起的风险降低，对系统的扩展性、维护性都有非常大的帮助。 二、里氏替换原则里氏替换原则的英文名称为Liskov Substitution Principle - LSP。 第一种定义： 如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1都代换为o2，程序P的行为没有发生变化，那么类型S是类型T的子类型。 第二种定义：Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it. 译文：所有引用基类的地方必须透明的使用其子类的对象。 理解：第二种定义明确的说，只要父类能出现的地方子类也可以出现，而且替换为子类不会产生任何错误或异常，但是反过来就不行，有子类出现的地方，父类未必就能适应。 应用：在继承类时，务必重写（Override）父类中所有的方法，尤其需要注意父类的 protected 方法（它们往往是让您重写的），子类尽量不要暴露自己的 public 方法供外界调用。 里氏替换原则经验在项目中，采用里氏替换原则时，尽量避免子类的“个性”，一旦子类有了“个性”，这个子类和父类之间的关系就难调和，把子类当做父类使用，子类的“个性”被抺杀了，把子类单独作为一个业务来使用，则会让代码间的耦合关系变得扑朔迷离–缺乏类替换的标准。 三、依赖倒置原则依赖倒置原则英文名为 Dependence Inversion Principle - DIP。 原文：High level modules should not depends upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions. 译文：高层模块不应该依赖于低层模块，它们应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。 「抽象」是指接口或者抽象类，两者都是不能直接被实例化的； 「细节」就是实现类，实现接口或继承抽象类而产生的类就是细节，其特点就是可以直接被实例化； 理解：应该面向接口编程，不应该面向实现类编程。面向实现类编程，相当于就是论事，那是正向依赖（正常人思维）；面向接口编程，相当于通过事物表象来看本质，那是反向依赖，即依赖倒置（程序员思维）。 四、接口隔离原则接口隔离原则：Interface Segregation Principle - ISP。 译文：一个类与另一个类之间的依赖性，应该依赖于尽可能小的接口。 理解：不要对外暴露没有实际意义的接口。也就是说，接口是给别人调用的，那就不要去为难别人了，尽可能保证接口的实用性吧。她好，我也好。 应用：当需要对外暴露接口时，需要再三斟酌，如果真的没有必要对外提供的，就删了吧。一旦您提供了，就意味着，您将来要多做一件事情，何苦要给自己找事做呢。 五、迪米特法则迪米特法则也称为最少知识原则：Least Knowledge Principle - LKP。 原文：Only talk to you immediate friends. 译文：只与你最直接的朋友交流。 理解：尽量减少对象之间的交互，从而减小类之间的耦合。简言之，一定要做到：低耦合，高内聚。 应用：在做系统设计时，不要让一个类依赖于太多的其他类，需尽量减小依赖关系，否则，您死都不知道自己怎么死的。 六、开闭原则开放封闭原则：Open Closed Principle - OCP。 原文：Software entities like classes, modules and functions should be open for extension but closed for modifications. 译文：软件实体，如：类、模块与函数，对于扩展应该是开放的，但对于修改应该是封闭的。 理解：简言之，对扩展开放，对修改封闭。换句话说，可以去扩展类，但不要去修改类。 应用：当需求有改动，要修改代码了，此时您要做的是，尽量用继承或组合的方式来扩展类的功能，而不是直接修改类的代码。当然，如果能够确保对整体架构不会产生任何影响，那么也没必要搞得那么复杂了，直接改这个类吧。&gt; 参考了《设计模式之禅》以及部分大佬的博客。]]></content>
      <categories>
        <category>课堂</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用Hexo+Git+GitHub一步一步搭建博客]]></title>
    <url>%2Fpost%2F9ec3e2c0.html</url>
    <content type="text"><![CDATA[第一步先注册Github账号 GitHub的注册步骤看这个 https://jingyan.baidu.com/article/f7ff0bfc7181492e27bb1360.html 第二步Git的安装 Git的安装步骤如下https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000 第三步是Hexo的搭建 https://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html?qq-pf-to=pcqq.c2c 第四步发表文章 http://blog.csdn.net/qq_36099238/article/details/54576089 这里可能部分群众的表情如下 算了，其实我当初忘记保留截图，你们搭建的过程中出现的问题解决了可以记录下来，那就是你们成为大神的磨刀石！ 下面这条连接你们可以参考一下http://www.hpqsblog.top/2017/06/22/%E5%A6%82%E4%BD%95%E7%94%A8github+hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20/#more]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AboutMe]]></title>
    <url>%2Fpost%2F5658dbc3.html</url>
    <content type="text"><![CDATA[大家好，这是我的博客，我是华软薛之豪.为什么我要写博客呢？其实我是这样理解的；博客是一个程序员的日志，可以记录你每天的编程心得，比如你解决了一个bug,那你可以记录下来，最好是能写得通俗易懂的，毕竟这是一个知识共享平台一来你可以帮助到别人其次能加深这方面的记忆理解。今天就说这么多吧。之前的博客被我折腾坏了，现在把文章重新写一遍，真难受…..]]></content>
      <categories>
        <category>简介</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>about</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2Fpost%2Fd87f7e0c.html</url>
    <content type="text"><![CDATA[你好！！]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>about</tag>
      </tags>
  </entry>
</search>
