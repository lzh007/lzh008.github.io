<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[软件项目的部分问题01]]></title>
    <url>%2Fpost%2F7617a729.html</url>
    <content type="text"><![CDATA[什么是软件设计原则 一、单一职责单一职责原则的英文名称为Single Responsibility Principle - SRP。 原文：There should never be more than one reason for a class to change. 译文：永远不应该有多于一个原因来改变某个类。 理解：单一职责原则就是一个接口或类只有一个职责，它就负责一件事情。好比，玩游戏，LOL那种，辅助位就得尽责，当好辅助位的，不是动不动跟ADC（射手）抢人头，抢兵线。五个位置的英雄各司其职，分工协调好，战斗力妥妥的！ 应用：当我们做系统设计时，如果发现有一个类拥有了两种的职责，那就问自己一个问题：可以将这个类分成两个类吗？如果真的有必要，那就分吧。千万不要让一个类干的事情太多！ 优点： 类的复杂性降低，实现什么职责都要清晰明确的定义； 复杂性降低，那当然可读性提高； 可读性提高，那当然更容易维护了； 变更引起的风险降低，对系统的扩展性、维护性都有非常大的帮助。 二、里氏替换原则里氏替换原则的英文名称为Liskov Substitution Principle - LSP。 第一种定义： 如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1都代换为o2，程序P的行为没有发生变化，那么类型S是类型T的子类型。 第二种定义：Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it. 译文：所有引用基类的地方必须透明的使用其子类的对象。 理解：第二种定义明确的说，只要父类能出现的地方子类也可以出现，而且替换为子类不会产生任何错误或异常，但是反过来就不行，有子类出现的地方，父类未必就能适应。 应用：在继承类时，务必重写（Override）父类中所有的方法，尤其需要注意父类的 protected 方法（它们往往是让您重写的），子类尽量不要暴露自己的 public 方法供外界调用。 里氏替换原则经验在项目中，采用里氏替换原则时，尽量避免子类的“个性”，一旦子类有了“个性”，这个子类和父类之间的关系就难调和，把子类当做父类使用，子类的“个性”被抺杀了，把子类单独作为一个业务来使用，则会让代码间的耦合关系变得扑朔迷离–缺乏类替换的标准。 三、依赖倒置原则依赖倒置原则英文名为 Dependence Inversion Principle - DIP。 原文：High level modules should not depends upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions. 译文：高层模块不应该依赖于低层模块，它们应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。 「抽象」是指接口或者抽象类，两者都是不能直接被实例化的； 「细节」就是实现类，实现接口或继承抽象类而产生的类就是细节，其特点就是可以直接被实例化； 理解：应该面向接口编程，不应该面向实现类编程。面向实现类编程，相当于就是论事，那是正向依赖（正常人思维）；面向接口编程，相当于通过事物表象来看本质，那是反向依赖，即依赖倒置（程序员思维）。 四、接口隔离原则接口隔离原则：Interface Segregation Principle - ISP。 译文：一个类与另一个类之间的依赖性，应该依赖于尽可能小的接口。 理解：不要对外暴露没有实际意义的接口。也就是说，接口是给别人调用的，那就不要去为难别人了，尽可能保证接口的实用性吧。她好，我也好。 应用：当需要对外暴露接口时，需要再三斟酌，如果真的没有必要对外提供的，就删了吧。一旦您提供了，就意味着，您将来要多做一件事情，何苦要给自己找事做呢。 五、迪米特法则迪米特法则也称为最少知识原则：Least Knowledge Principle - LKP。 原文：Only talk to you immediate friends. 译文：只与你最直接的朋友交流。 理解：尽量减少对象之间的交互，从而减小类之间的耦合。简言之，一定要做到：低耦合，高内聚。 应用：在做系统设计时，不要让一个类依赖于太多的其他类，需尽量减小依赖关系，否则，您死都不知道自己怎么死的。 六、开闭原则开放封闭原则：Open Closed Principle - OCP。 原文：Software entities like classes, modules and functions should be open for extension but closed for modifications. 译文：软件实体，如：类、模块与函数，对于扩展应该是开放的，但对于修改应该是封闭的。 理解：简言之，对扩展开放，对修改封闭。换句话说，可以去扩展类，但不要去修改类。 应用：当需求有改动，要修改代码了，此时您要做的是，尽量用继承或组合的方式来扩展类的功能，而不是直接修改类的代码。当然，如果能够确保对整体架构不会产生任何影响，那么也没必要搞得那么复杂了，直接改这个类吧。&gt; 参考了《设计模式之禅》以及部分大佬的博客。]]></content>
      <categories>
        <category>课堂</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用Hexo+Git+GitHub一步一步搭建博客]]></title>
    <url>%2Fpost%2F9ec3e2c0.html</url>
    <content type="text"><![CDATA[第一步先注册Github账号 GitHub的注册步骤看这个 https://jingyan.baidu.com/article/f7ff0bfc7181492e27bb1360.html 第二步Git的安装 Git的安装步骤如下https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000 第三步是Hexo的搭建 https://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html?qq-pf-to=pcqq.c2c 第四步发表文章 http://blog.csdn.net/qq_36099238/article/details/54576089 这里可能部分群众的表情如下 算了，其实我当初忘记保留截图，你们搭建的过程中出现的问题解决了可以记录下来，那就是你们成为大神的磨刀石！ 下面这条连接你们可以参考一下http://www.hpqsblog.top/2017/06/22/%E5%A6%82%E4%BD%95%E7%94%A8github+hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20/#more]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AboutMe]]></title>
    <url>%2Fpost%2F5658dbc3.html</url>
    <content type="text"><![CDATA[大家好，这是我的博客，我是华软薛之豪.为什么我要写博客呢？其实我是这样理解的；博客是一个程序员的日志，可以记录你每天的编程心得，比如你解决了一个bug,那你可以记录下来，最好是能写得通俗易懂的，毕竟这是一个知识共享平台一来你可以帮助到别人其次能加深这方面的记忆理解。今天就说这么多吧。之前的博客被我折腾坏了，现在把文章重新写一遍，真难受…..]]></content>
      <categories>
        <category>简介</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>about</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2Fpost%2Fd87f7e0c.html</url>
    <content type="text"><![CDATA[你好！！]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>about</tag>
      </tags>
  </entry>
</search>
