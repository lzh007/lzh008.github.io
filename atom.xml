<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>薛之豪的博客</title>
  
  <subtitle>学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://linzhihao.top/"/>
  <updated>2018-05-02T13:07:39.686Z</updated>
  <id>http://linzhihao.top/</id>
  
  <author>
    <name>薛之豪</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件项目的部分问题01</title>
    <link href="http://linzhihao.top/post/7617a729.html"/>
    <id>http://linzhihao.top/post/7617a729.html</id>
    <published>2018-05-02T08:03:55.000Z</published>
    <updated>2018-05-02T13:07:39.686Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>什么是软件设计原则</strong></li></ul><h4 id="一、单一职责"><a href="#一、单一职责" class="headerlink" title="一、单一职责"></a>一、单一职责</h4><p>单一职责原则的英文名称为Single Responsibility Principle - SRP。</p><p>原文：There should never be more than one reason for a class to change.</p><p>译文：永远不应该有多于一个原因来改变某个类。</p><p>理解：单一职责原则就是一个接口或类只有一个职责，它就负责一件事情。好比，玩游戏，LOL那种，辅助位就得尽责，当好辅助位的，不是动不动跟ADC（射手）抢人头，抢兵线。五个位置的英雄各司其职，分工协调好，战斗力妥妥的！</p><p>应用：当我们做系统设计时，如果发现有一个类拥有了两种的职责，那就问自己一个问题：可以将这个类分成两个类吗？如果真的有必要，那就分吧。千万不要让一个类干的事情太多！</p><p>优点：</p><ol><li>类的复杂性降低，实现什么职责都要清晰明确的定义；</li><li>复杂性降低，那当然可读性提高；</li><li>可读性提高，那当然更容易维护了；</li><li>变更引起的风险降低，对系统的扩展性、维护性都有非常大的帮助。</li></ol><hr><h4 id="二、里氏替换原则"><a href="#二、里氏替换原则" class="headerlink" title="二、里氏替换原则"></a>二、里氏替换原则</h4><p>里氏替换原则的英文名称为Liskov Substitution Principle - LSP。</p><p>第一种定义：</p><p>如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1都代换为o2，程序P的行为没有发生变化，那么类型S是类型T的子类型。</p><p>第二种定义：<br>Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.</p><p>译文：所有引用基类的地方必须透明的使用其子类的对象。</p><p>理解：第二种定义明确的说，只要父类能出现的地方子类也可以出现，而且替换为子类不会产生任何错误或异常，但是反过来就不行，有子类出现的地方，父类未必就能适应。</p><p>应用：在继承类时，务必重写（Override）父类中所有的方法，尤其需要注意父类的 protected 方法（它们往往是让您重写的），子类尽量不要暴露自己的 public 方法供外界调用。</p><h6 id="里氏替换原则经验"><a href="#里氏替换原则经验" class="headerlink" title="里氏替换原则经验"></a>里氏替换原则经验</h6><p>在项目中，采用里氏替换原则时，尽量避免子类的“个性”，一旦子类有了“个性”，这个子类和父类之间的关系就难调和，把子类当做父类使用，子类的“个性”被抺杀了，把子类单独作为一个业务来使用，则会让代码间的耦合关系变得扑朔迷离–缺乏类替换的标准。</p><hr><h4 id="三、依赖倒置原则"><a href="#三、依赖倒置原则" class="headerlink" title="三、依赖倒置原则"></a>三、依赖倒置原则</h4><p>依赖倒置原则英文名为 Dependence Inversion Principle - DIP。</p><p>原文：High level modules should not depends upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.</p><p>译文：高层模块不应该依赖于低层模块，它们应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</p><p>「抽象」是指接口或者抽象类，两者都是不能直接被实例化的；</p><p>「细节」就是实现类，实现接口或继承抽象类而产生的类就是细节，其特点就是可以直接被实例化；</p><p>理解：应该面向接口编程，不应该面向实现类编程。面向实现类编程，相当于就是论事，那是正向依赖（正常人思维）；面向接口编程，相当于通过事物表象来看本质，那是反向依赖，即依赖倒置（程序员思维）。</p><hr><h4 id="四、接口隔离原则"><a href="#四、接口隔离原则" class="headerlink" title="四、接口隔离原则"></a>四、接口隔离原则</h4><p>接口隔离原则：Interface Segregation Principle - ISP。</p><p>译文：一个类与另一个类之间的依赖性，应该依赖于尽可能小的接口。</p><p>理解：不要对外暴露没有实际意义的接口。也就是说，接口是给别人调用的，那就不要去为难别人了，尽可能保证接口的实用性吧。她好，我也好。</p><p>应用：当需要对外暴露接口时，需要再三斟酌，如果真的没有必要对外提供的，就删了吧。一旦您提供了，就意味着，您将来要多做一件事情，何苦要给自己找事做呢。</p><hr><h4 id="五、迪米特法则"><a href="#五、迪米特法则" class="headerlink" title="五、迪米特法则"></a>五、迪米特法则</h4><p>迪米特法则也称为最少知识原则：Least Knowledge Principle - LKP。</p><p>原文：Only talk to you immediate friends.</p><p>译文：只与你最直接的朋友交流。</p><p>理解：尽量减少对象之间的交互，从而减小类之间的耦合。简言之，一定要做到：低耦合，高内聚。</p><p>应用：在做系统设计时，不要让一个类依赖于太多的其他类，需尽量减小依赖关系，否则，您死都不知道自己怎么死的。</p><hr><h4 id="六、开闭原则"><a href="#六、开闭原则" class="headerlink" title="六、开闭原则"></a>六、开闭原则</h4><p>开放封闭原则：Open Closed Principle - OCP。</p><p>原文：Software entities like classes, modules and functions should be open for extension but closed for modifications.</p><p>译文：软件实体，如：类、模块与函数，对于扩展应该是开放的，但对于修改应该是封闭的。</p><p>理解：简言之，对扩展开放，对修改封闭。换句话说，可以去扩展类，但不要去修改类。</p><p>应用：当需求有改动，要修改代码了，此时您要做的是，尽量用继承或组合的方式来扩展类的功能，而不是直接修改类的代码。当然，如果能够确保对整体架构不会产生任何影响，那么也没必要搞得那么复杂了，直接改这个类吧。<br>&gt;</p><blockquote><p>参考了《设计模式之禅》以及部分大佬的博客。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;什么是软件设计原则&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;一、单一职责&quot;&gt;&lt;a href=&quot;#一、单一职责&quot; class=&quot;headerlink&quot; title=&quot;一、单一职责&quot;&gt;&lt;/a&gt;一、单一职责&lt;/h4&gt;&lt;p&gt;单一职责原则的
      
    
    </summary>
    
      <category term="课堂" scheme="http://linzhihao.top/categories/%E8%AF%BE%E5%A0%82/"/>
    
    
      <category term="other" scheme="http://linzhihao.top/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Hexo+Git+GitHub一步一步搭建博客</title>
    <link href="http://linzhihao.top/post/9ec3e2c0.html"/>
    <id>http://linzhihao.top/post/9ec3e2c0.html</id>
    <published>2018-04-13T01:18:30.000Z</published>
    <updated>2018-04-13T01:19:57.760Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>第一步先注册Github账号</strong></li><li><strong>GitHub的注册步骤看这个</strong></li><li><a href="https://jingyan.baidu.com/article/f7ff0bfc7181492e27bb1360.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/f7ff0bfc7181492e27bb1360.html</a></li><li><strong>第二步Git的安装</strong></li><li><strong>Git的安装步骤如下<br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000</a></strong></li><li><strong>第三步是Hexo的搭建</strong></li><li><strong><a href="https://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html?qq-pf-to=pcqq.c2c" target="_blank" rel="noopener">https://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html?qq-pf-to=pcqq.c2c</a></strong></li><li><strong>第四步发表文章</strong></li><li><strong><a href="http://blog.csdn.net/qq_36099238/article/details/54576089" target="_blank" rel="noopener">http://blog.csdn.net/qq_36099238/article/details/54576089</a></strong></li></ul><hr><p> <strong>这里可能部分群众的表情如下</strong><br> <img src="http://img.blog.csdn.net/20171204214909019?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHpoNzU0NDEzNTYz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="300" height="200" alt="图片名称" align="center"></p><ul><li><strong>算了，其实我当初忘记保留截图，你们搭建的过程中出现的问题解决了可以记录下来，那就是你们成为大神的磨刀石！</strong></li><li><strong>下面这条连接你们可以参考一下</strong><br><a href="http://www.hpqsblog.top/2017/06/22/%E5%A6%82%E4%BD%95%E7%94%A8github+hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20/#more" target="_blank" rel="noopener">http://www.hpqsblog.top/2017/06/22/%E5%A6%82%E4%BD%95%E7%94%A8github+hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20/#more</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第一步先注册Github账号&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub的注册步骤看这个&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jingyan.baidu.com/article/f7ff0b
      
    
    </summary>
    
      <category term="搭建博客" scheme="http://linzhihao.top/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="github" scheme="http://linzhihao.top/tags/github/"/>
    
      <category term="hexo" scheme="http://linzhihao.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>AboutMe</title>
    <link href="http://linzhihao.top/post/5658dbc3.html"/>
    <id>http://linzhihao.top/post/5658dbc3.html</id>
    <published>2018-04-12T14:30:45.000Z</published>
    <updated>2018-04-12T14:33:52.469Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，这是我的博客，我是华软薛之豪.<br>为什么我要写博客呢？其实我是这样理解的；<br>博客是一个程序员的日志，可以记录你每天的编程心得，<br>比如你解决了一个bug,那你可以记录下来，最好是能写得通俗易懂的，毕竟这是一个知识共享平台<br>一来你可以帮助到别人其次能加深这方面的记忆理解。今天就说这么多吧。<br>之前的博客被我折腾坏了，现在把文章重新写一遍，真难受…..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大家好，这是我的博客，我是华软薛之豪.&lt;br&gt;为什么我要写博客呢？其实我是这样理解的；&lt;br&gt;博客是一个程序员的日志，可以记录你每天的编程心得，&lt;br&gt;比如你解决了一个bug,那你可以记录下来，最好是能写得通俗易懂的，毕竟这是一个知识共享平台&lt;br&gt;一来你可以帮助到别人其次
      
    
    </summary>
    
      <category term="简介" scheme="http://linzhihao.top/categories/%E7%AE%80%E4%BB%8B/"/>
    
    
      <category term="blog" scheme="http://linzhihao.top/tags/blog/"/>
    
      <category term="about" scheme="http://linzhihao.top/tags/about/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://linzhihao.top/post/d87f7e0c.html"/>
    <id>http://linzhihao.top/post/d87f7e0c.html</id>
    <published>2018-04-12T14:17:44.000Z</published>
    <updated>2018-04-12T14:19:52.852Z</updated>
    
    <content type="html"><![CDATA[<p>你好！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你好！！&lt;/p&gt;

      
    
    </summary>
    
      <category term="测试" scheme="http://linzhihao.top/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="blog" scheme="http://linzhihao.top/tags/blog/"/>
    
      <category term="about" scheme="http://linzhihao.top/tags/about/"/>
    
  </entry>
  
</feed>
